
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxanalysis;

import java.util.ArrayList;
import tree.*;
import java.lang.Exception;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\007\005\000\002\004\003" +
    "\000\002\004\004\000\002\006\010\000\002\006\007\000" +
    "\002\036\002\000\002\005\013\000\002\037\002\000\002" +
    "\005\012\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\007\000\002\023\003\000\002\023\005" +
    "\000\002\014\003\000\002\014\002\000\002\020\003\000" +
    "\002\020\005\000\002\021\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\005\000\002\025\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\031\011\000\002\032\004\000\002\032\002\000\002\033" +
    "\006\000\002\034\004\000\002\034\002\000\002\035\011" +
    "\000\002\035\007\000\002\016\003\000\002\016\005\000" +
    "\002\017\003\000\002\017\005\000\002\030\006\000\002" +
    "\015\006\000\002\027\005\000\002\010\006\000\002\010" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\004\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\014\027\013\030\005\031\012\032\011\034" +
    "\ufffe\001\002\000\004\002\236\001\002\000\010\022\uffe6" +
    "\033\uffe6\055\uffe6\001\002\000\004\055\225\001\002\000" +
    "\004\034\017\001\002\000\030\027\013\030\005\031\012" +
    "\032\011\034\ufffe\037\ufffe\044\ufffe\047\ufffe\050\ufffe\052" +
    "\ufffe\055\ufffe\001\002\000\010\022\uffe8\033\uffe8\055\uffe8" +
    "\001\002\000\010\022\uffe7\033\uffe7\055\uffe7\001\002\000" +
    "\010\022\uffe9\033\uffe9\055\uffe9\001\002\000\020\034\uffff" +
    "\037\uffff\044\uffff\047\uffff\050\uffff\052\uffff\055\uffff\001" +
    "\002\000\006\002\ufffc\034\017\001\002\000\004\002\000" +
    "\001\002\000\004\055\020\001\002\000\004\025\021\001" +
    "\002\000\014\026\023\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\001\002\000\012\027\013\030\005\031\012\032\011\001" +
    "\002\000\014\027\ufff6\030\ufff6\031\ufff6\032\ufff6\036\ufff6" +
    "\001\002\000\014\027\013\030\005\031\012\032\011\036" +
    "\030\001\002\000\006\022\uffe5\033\uffe5\001\002\000\006" +
    "\022\205\033\ufff0\001\002\000\004\033\031\001\002\000" +
    "\006\022\uffe4\033\uffe4\001\002\000\026\027\013\030\005" +
    "\031\012\032\011\037\ufffe\044\ufffe\047\ufffe\050\ufffe\052" +
    "\ufffe\055\ufffe\001\002\000\016\037\044\044\035\047\034" +
    "\050\047\052\051\055\046\001\002\000\006\002\ufff5\034" +
    "\ufff5\001\002\000\004\025\201\001\002\000\034\004\063" +
    "\006\056\013\070\037\044\044\035\047\034\050\047\053" +
    "\057\054\055\055\170\056\061\057\062\060\065\001\002" +
    "\000\004\024\uffdf\001\002\000\004\024\uffe1\001\002\000" +
    "\004\024\uffde\001\002\000\004\024\163\001\002\000\004" +
    "\024\uffdd\001\002\000\004\024\uffdc\001\002\000\024\004" +
    "\063\006\056\013\070\053\057\054\055\055\066\056\061" +
    "\057\062\060\065\001\002\000\004\052\141\001\002\000" +
    "\010\022\uffd3\025\124\051\uffd3\001\002\000\004\025\136" +
    "\001\002\000\004\024\uffe0\001\002\000\026\004\063\006" +
    "\056\013\070\035\uffed\053\057\054\055\055\066\056\061" +
    "\057\062\060\065\001\002\000\006\022\053\051\054\001" +
    "\002\000\004\055\131\001\002\000\024\004\063\006\056" +
    "\013\070\053\057\054\055\055\066\056\061\057\062\060" +
    "\065\001\002\000\046\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\024\uffb8\026\uffb8\035\uffb8\040\uffb8" +
    "\045\uffb8\001\002\000\024\004\063\006\056\013\070\053" +
    "\057\054\055\055\066\056\061\057\062\060\065\001\002" +
    "\000\046\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\024\uffb9\026\uffb9\035\uffb9\040\uffb9\045\uffb9\001" +
    "\002\000\004\024\uffcd\001\002\000\046\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\026\uffb7" +
    "\035\uffb7\040\uffb7\045\uffb7\001\002\000\046\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\026" +
    "\uffb6\035\uffb6\040\uffb6\045\uffb6\001\002\000\046\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3" +
    "\026\uffb3\035\uffb3\040\uffb3\045\uffb3\001\002\000\046\005" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024" +
    "\uffba\026\uffba\035\uffba\040\uffba\045\uffba\001\002\000\046" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\024\uffb5\026\uffb5\035\uffb5\040\uffb5\045\uffb5\001\002\000" +
    "\050\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\024\uffb4\025\124\026\uffb4\035\uffb4\040\uffb4\045\uffb4" +
    "\001\002\000\042\005\075\006\072\007\102\010\100\011" +
    "\073\012\105\014\101\015\074\016\104\017\077\020\076" +
    "\021\103\022\122\024\uffc9\026\uffc9\035\uffc9\001\002\000" +
    "\024\004\063\006\056\013\070\053\057\054\055\055\066" +
    "\056\061\057\062\060\065\001\002\000\046\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\026" +
    "\uffc2\035\uffc2\040\uffc2\045\uffc2\001\002\000\024\004\063" +
    "\006\056\013\070\053\057\054\055\055\066\056\061\057" +
    "\062\060\065\001\002\000\024\004\063\006\056\013\070" +
    "\053\057\054\055\055\066\056\061\057\062\060\065\001" +
    "\002\000\024\004\063\006\056\013\070\053\057\054\055" +
    "\055\066\056\061\057\062\060\065\001\002\000\024\004" +
    "\063\006\056\013\070\053\057\054\055\055\066\056\061" +
    "\057\062\060\065\001\002\000\024\004\063\006\056\013" +
    "\070\053\057\054\055\055\066\056\061\057\062\060\065" +
    "\001\002\000\024\004\063\006\056\013\070\053\057\054" +
    "\055\055\066\056\061\057\062\060\065\001\002\000\024" +
    "\004\063\006\056\013\070\053\057\054\055\055\066\056" +
    "\061\057\062\060\065\001\002\000\024\004\063\006\056" +
    "\013\070\053\057\054\055\055\066\056\061\057\062\060" +
    "\065\001\002\000\024\004\063\006\056\013\070\053\057" +
    "\054\055\055\066\056\061\057\062\060\065\001\002\000" +
    "\024\004\063\006\056\013\070\053\057\054\055\055\066" +
    "\056\061\057\062\060\065\001\002\000\024\004\063\006" +
    "\056\013\070\053\057\054\055\055\066\056\061\057\062" +
    "\060\065\001\002\000\024\004\063\006\056\013\070\053" +
    "\057\054\055\055\066\056\061\057\062\060\065\001\002" +
    "\000\046\005\uffc3\006\uffc3\007\102\010\100\011\073\012" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\024\uffc3\026\uffc3\035\uffc3\040\uffc3\045\uffc3\001" +
    "\002\000\046\005\075\006\072\007\102\010\100\011\073" +
    "\012\105\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\024\uffbf\026\uffbf\035\uffbf\040\uffbf\045\uffbf" +
    "\001\002\000\046\005\075\006\072\007\102\010\100\011" +
    "\073\012\105\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\024\uffbc\026\uffbc\035\uffbc\040\uffbc\045" +
    "\uffbc\001\002\000\046\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\024\uffc6\026\uffc6\035\uffc6\040\uffc6" +
    "\045\uffc6\001\002\000\046\005\075\006\072\007\102\010" +
    "\100\011\073\012\105\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\024\uffc1\026\uffc1\035\uffc1\040" +
    "\uffc1\045\uffc1\001\002\000\046\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\026\uffc5\035\uffc5" +
    "\040\uffc5\045\uffc5\001\002\000\046\005\075\006\072\007" +
    "\102\010\100\011\073\012\105\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\026\uffbe\035" +
    "\uffbe\040\uffbe\045\uffbe\001\002\000\046\005\075\006\072" +
    "\007\102\010\100\011\073\012\105\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\026\uffbd" +
    "\035\uffbd\040\uffbd\045\uffbd\001\002\000\046\005\uffc8\006" +
    "\uffc8\007\102\010\100\011\073\012\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\026" +
    "\uffc8\035\uffc8\040\uffc8\045\uffc8\001\002\000\046\005\075" +
    "\006\072\007\102\010\100\011\073\012\105\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0" +
    "\026\uffc0\035\uffc0\040\uffc0\045\uffc0\001\002\000\046\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024" +
    "\uffc4\026\uffc4\035\uffc4\040\uffc4\045\uffc4\001\002\000\046" +
    "\005\uffc7\006\uffc7\007\102\010\100\011\073\012\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\024\uffc7\026\uffc7\035\uffc7\040\uffc7\045\uffc7\001\002\000" +
    "\024\004\063\006\056\013\070\053\057\054\055\055\066" +
    "\056\061\057\062\060\065\001\002\000\010\024\uffca\026" +
    "\uffca\035\uffca\001\002\000\026\004\063\006\056\013\070" +
    "\026\126\053\057\054\055\055\066\056\061\057\062\060" +
    "\065\001\002\000\004\026\127\001\002\000\046\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb" +
    "\026\uffcb\035\uffcb\040\uffcb\045\uffcb\001\002\000\046\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024" +
    "\uffcc\026\uffcc\035\uffcc\040\uffcc\045\uffcc\001\002\000\046" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\024\uffbb\026\uffbb\035\uffbb\040\uffbb\045\uffbb\001\002\000" +
    "\010\022\uffd2\026\uffd2\051\uffd2\001\002\000\004\035\uffee" +
    "\001\002\000\004\035\134\001\002\000\004\024\135\001" +
    "\002\000\006\002\ufff9\034\ufff9\001\002\000\024\004\063" +
    "\006\056\013\070\053\057\054\055\055\066\056\061\057" +
    "\062\060\065\001\002\000\004\026\140\001\002\000\004" +
    "\024\uffce\001\002\000\026\004\063\006\056\013\070\035" +
    "\uffed\053\057\054\055\055\066\056\061\057\062\060\065" +
    "\001\002\000\004\035\143\001\002\000\004\024\144\001" +
    "\002\000\006\002\ufffa\034\ufffa\001\002\000\034\005\075" +
    "\006\072\007\102\010\100\011\073\012\105\014\101\015" +
    "\074\016\104\017\077\020\076\021\103\040\146\001\002" +
    "\000\014\037\044\044\035\047\034\050\047\055\046\001" +
    "\002\000\010\041\151\042\uffd9\043\uffd9\001\002\000\006" +
    "\042\uffd6\043\157\001\002\000\024\004\063\006\056\013" +
    "\070\053\057\054\055\055\066\056\061\057\062\060\065" +
    "\001\002\000\010\041\151\042\uffd9\043\uffd9\001\002\000" +
    "\006\042\uffda\043\uffda\001\002\000\034\005\075\006\072" +
    "\007\102\010\100\011\073\012\105\014\101\015\074\016" +
    "\104\017\077\020\076\021\103\040\155\001\002\000\014" +
    "\037\044\044\035\047\034\050\047\055\046\001\002\000" +
    "\010\041\uffd8\042\uffd8\043\uffd8\001\002\000\014\037\044" +
    "\044\035\047\034\050\047\055\046\001\002\000\004\042" +
    "\161\001\002\000\004\024\uffdb\001\002\000\004\042\uffd7" +
    "\001\002\000\026\037\044\041\uffe2\042\uffe2\043\uffe2\044" +
    "\035\046\uffe2\047\034\050\047\052\uffe2\055\046\001\002" +
    "\000\014\041\uffe3\042\uffe3\043\uffe3\046\uffe3\052\uffe3\001" +
    "\002\000\034\005\075\006\072\007\102\010\100\011\073" +
    "\012\105\014\101\015\074\016\104\017\077\020\076\021" +
    "\103\045\176\001\002\000\004\052\171\001\002\000\036" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\024\uffdc" +
    "\045\uffba\001\002\000\042\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffd3\025\124\045\uffb4\051\uffd3\001" +
    "\002\000\024\004\063\006\056\013\070\053\057\054\055" +
    "\055\066\056\061\057\062\060\065\001\002\000\034\005" +
    "\075\006\072\007\102\010\100\011\073\012\105\014\101" +
    "\015\074\016\104\017\077\020\076\021\103\045\173\001" +
    "\002\000\014\037\044\044\035\047\034\050\047\055\046" +
    "\001\002\000\004\046\175\001\002\000\004\024\uffd5\001" +
    "\002\000\014\037\044\044\035\047\034\050\047\055\046" +
    "\001\002\000\004\046\200\001\002\000\004\024\uffd4\001" +
    "\002\000\004\055\202\001\002\000\006\022\uffd3\026\uffd3" +
    "\001\002\000\006\022\053\026\204\001\002\000\004\024" +
    "\uffcf\001\002\000\014\027\013\030\005\031\012\032\011" +
    "\036\030\001\002\000\004\033\uffef\001\002\000\004\055" +
    "\220\001\002\000\006\024\uffec\026\uffec\001\002\000\006" +
    "\024\212\026\213\001\002\000\012\027\013\030\005\031" +
    "\012\032\011\001\002\000\014\027\013\030\005\031\012" +
    "\032\011\036\030\001\002\000\004\033\215\001\002\000" +
    "\026\027\013\030\005\031\012\032\011\037\ufffe\044\ufffe" +
    "\047\ufffe\050\ufffe\052\ufffe\055\ufffe\001\002\000\006\002" +
    "\ufff7\034\ufff7\001\002\000\006\024\uffeb\026\uffeb\001\002" +
    "\000\010\022\uffd1\024\uffd1\026\uffd1\001\002\000\010\022" +
    "\222\024\uffea\026\uffea\001\002\000\004\055\223\001\002" +
    "\000\010\022\uffd0\024\uffd0\026\uffd0\001\002\000\004\002" +
    "\ufffb\001\002\000\010\022\ufff4\024\ufff4\051\234\001\002" +
    "\000\006\022\227\024\230\001\002\000\004\055\231\001" +
    "\002\000\030\027\ufffd\030\ufffd\031\ufffd\032\ufffd\034\ufffd" +
    "\037\ufffd\044\ufffd\047\ufffd\050\ufffd\052\ufffd\055\ufffd\001" +
    "\002\000\010\022\ufff3\024\ufff3\051\232\001\002\000\024" +
    "\004\063\006\056\013\070\053\057\054\055\055\066\056" +
    "\061\057\062\060\065\001\002\000\036\005\075\006\072" +
    "\007\102\010\100\011\073\012\105\014\101\015\074\016" +
    "\104\017\077\020\076\021\103\022\ufff1\024\ufff1\001\002" +
    "\000\024\004\063\006\056\013\070\053\057\054\055\055" +
    "\066\056\061\057\062\060\065\001\002\000\036\005\075" +
    "\006\072\007\102\010\100\011\073\012\105\014\101\015" +
    "\074\016\104\017\077\020\076\021\103\022\ufff2\024\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\012\002\003\003\006\007\007\022\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\225" +
    "\001\001\000\006\004\015\005\014\001\001\000\010\003" +
    "\013\007\007\022\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\223\005\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\021\001\001\000\010\020" +
    "\210\021\207\022\206\001\001\000\004\037\023\001\001" +
    "\000\010\022\024\023\026\024\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\031\006\032\007\007\022\005\001\001\000" +
    "\024\010\042\015\037\016\051\025\044\026\040\027\041" +
    "\030\035\031\036\035\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\010\166\013\164\015\037\016\051" +
    "\025\165\026\040\027\041\030\035\031\036\035\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\063\013\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\063\012\131\013\066\014\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\063\012\057\013\066\001" +
    "\001\000\002\001\001\000\006\010\063\013\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\063\013\070\001\001\000\002\001\001\000\006\010\063" +
    "\013\120\001\001\000\006\010\063\013\117\001\001\000" +
    "\006\010\063\013\116\001\001\000\006\010\063\013\115" +
    "\001\001\000\006\010\063\013\114\001\001\000\006\010" +
    "\063\013\113\001\001\000\006\010\063\013\112\001\001" +
    "\000\006\010\063\013\111\001\001\000\006\010\063\013" +
    "\110\001\001\000\006\010\063\013\107\001\001\000\006" +
    "\010\063\013\106\001\001\000\006\010\063\013\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\063\012\122\013\066\001\001\000\002\001\001\000\010" +
    "\010\063\012\124\013\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\063\012\136\013\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\063\012\131\013\066\014\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\042\015\037\016\051\025\146\026\040\027\041" +
    "\030\035\031\036\035\047\001\001\000\006\032\147\033" +
    "\151\001\001\000\004\034\157\001\001\000\006\010\063" +
    "\013\153\001\001\000\006\032\152\033\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\042\015\037" +
    "\016\051\025\155\026\040\027\041\030\035\031\036\035" +
    "\047\001\001\000\002\001\001\000\024\010\042\015\037" +
    "\016\051\025\161\026\040\027\041\030\035\031\036\035" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\042\015\037\016\051\025\163\026" +
    "\040\027\041\030\035\031\036\035\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\063\013\171\001\001" +
    "\000\002\001\001\000\024\010\042\015\037\016\051\025" +
    "\173\026\040\027\041\030\035\031\036\035\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\042\015" +
    "\037\016\051\025\176\026\040\027\041\030\035\031\036" +
    "\035\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\024\023\205\024\025\001" +
    "\001\000\002\001\001\000\004\017\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\216\022\206\001" +
    "\001\000\010\022\024\023\213\024\025\001\001\000\002" +
    "\001\001\000\012\003\031\006\215\007\007\022\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\063\013\232\001\001\000\002\001\001\000\006\010\063" +
    "\013\234\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

public ProgramOp root;
             public Env currentTable = StackEnv.push(new Env(null, "global"));


           

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= var_decl_list proc_list 
            {
              ProgramOp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> v = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOp> p = (ArrayList<ProcOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		root = new ProgramOp(v, p);
                                          RESULT = root;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // var_decl_list ::= var_decl var_decl_list 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp v = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> list = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(list == null){
                                                      list = new ArrayList<VarDeclOp>();
                                                   }
                                                   list.add(0, v);
                                                   RESULT = list;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_decl_list ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_decl ::= type id_list_init SEMI 
            {
              VarDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDeclOp(t, list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // proc_list ::= proc 
            {
              ArrayList<ProcOp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOp p = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcOp> list = new ArrayList<>();
                                      list.add(p);
                                      RESULT = list;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_list ::= proc proc_list 
            {
              ArrayList<ProcOp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOp p = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOp> list = (ArrayList<ProcOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(0, p);
                                      RESULT = list;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proc_body ::= var_decl_list stat_list RETURN return_exprs CORP SEMI 
            {
              ProcOpBody RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOp> v_list = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<StatOp> s_list = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprs r_exprs = (ReturnExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ProcOpBody(v_list, s_list, r_exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // proc_body ::= var_decl_list RETURN return_exprs CORP SEMI 
            {
              ProcOpBody RESULT =null;
		int v_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> v_list = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprs r_exprs = (ReturnExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ProcOpBody(v_list, null, r_exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
currentTable = StackEnv.push(new Env(StackEnv.top(), i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc ::= PROC ID LPAR NT$0 param_decl_list RPAR result_type_list COLON proc_body 
            {
              ProcOp RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ProcOp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ParamDeclOp> p_list = (ArrayList<ParamDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ResultTypeOp> r_list = (ArrayList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOpBody p_body = (ProcOpBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
             IdLeaf f;
             if(temp == null){ //la procedura non è stata ancora dichiarata
                 temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
             } else {
                //la entry era stata inserita da qualcun altro ma la procedura non era stata ancora dichiarata
                //ora invece la dichiarazione è stata trovata
                ((SymbolTable.ProcRow) temp).setFref(false);
             }
             f = new IdLeaf(i, temp);
            RESULT = new ProcOp(f, p_list, r_list, p_body, currentTable);
            currentTable = StackEnv.pop();

          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 currentTable = StackEnv.push(new Env(StackEnv.top(), i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc ::= PROC ID LPAR RPAR NT$1 result_type_list COLON proc_body 
            {
              ProcOp RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ProcOp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int r_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ResultTypeOp> r_list = (ArrayList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p_bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOpBody p_body = (ProcOpBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
              IdLeaf f;
              if(temp == null){ //la procedura non è stata ancora dichiarata
                  temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
              } else {
                 //la entry era stata inserita da qualcun altro ma la procedura non era stata ancora dichiarata
                 //ora invece la dichiarazione è stata trovata
                 ((SymbolTable.ProcRow) temp).setFref(false);
              }
              f = new IdLeaf(i, temp);
            RESULT = new ProcOp(f, null, r_list, p_body, currentTable);
            currentTable = StackEnv.pop();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_list_init ::= ID 
            {
              IdListInitOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdListInit> list = new ArrayList<>();
                                                               SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                               IdLeaf temp = new IdLeaf(i,row);
                                                               if(row == null){
                                                                  row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                                  temp = new IdLeaf(i,row);
                                                               }
                                                               else{throw new Exception("Errore variabile già dichiarata");}
                                                               list.add(temp);
                                                               RESULT = new IdListInitOp(list);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list_init",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_list_init ::= id_list_init COMMA ID 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                              SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                              IdLeaf temp = new IdLeaf(i,row);
                                                              if(row == null){
                                                                 row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                                 temp = new IdLeaf(i,row);
                                                              }
                                                              else{throw new Exception("Errore variabile già dichiarata");}
                                                              list.add(temp);
                                                              RESULT = list;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list_init",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // id_list_init ::= ID ASSIGN expr 
            {
              IdListInitOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdListInit> list = new ArrayList<>();
                                                              SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                              IdLeaf temp = new IdLeaf(i,row);
                                                              if(row == null){
                                                                row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                                temp = new IdLeaf(i,row);
                                                              }else{
                                                               throw new Exception("Errore variabile già dichiarata");
                                                               }
                                                              list.add(new SimpleAssignOp(temp, e));
                                                              RESULT = new IdListInitOp(list);
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list_init",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // id_list_init ::= id_list_init COMMA ID ASSIGN expr 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                             IdLeaf temp = new IdLeaf(i,row);
                                                             if(row == null){
                                                             row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                             temp = new IdLeaf(i,row);
                                                             }else{
                                                              throw new Exception("Errore variabile già dichiarata");
                                                             }
                                                             list.add(new SimpleAssignOp(temp, e));
                                                             RESULT = list;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list_init",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // result_type_list ::= result_type 
            {
              ArrayList<ResultTypeOp> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ResultTypeOp r = (ResultTypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ResultTypeOp> list = new ArrayList<>();
                                     list.add(r);
                                     RESULT = list;
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_type_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // result_type_list ::= result_type COMMA result_type_list 
            {
              ArrayList<ResultTypeOp> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResultTypeOp r = (ResultTypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ResultTypeOp> list = (ArrayList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(0, r);
                                                                 RESULT = list;
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_type_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // return_exprs ::= expr_list 
            {
              ReturnExprs RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReturnExprs(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_exprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return_exprs ::= 
            {
              ReturnExprs RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_exprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param_decl_list ::= par_decl 
            {
              ArrayList<ParamDeclOp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDeclOp p = (ParamDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParamDeclOp> list = new ArrayList<>();
                                 list.add(p);
                                 RESULT = list;
                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param_decl_list ::= param_decl_list SEMI par_decl 
            {
              ArrayList<ParamDeclOp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParamDeclOp> list = (ArrayList<ParamDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDeclOp p = (ParamDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(p);
                       RESULT = list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // par_decl ::= type par_id_list 
            {
              ParamDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IdLeaf> list = (ArrayList<IdLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParamDeclOp(t, list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = new Type(Type.INT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = new Type(Type.BOOL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = new Type(Type.FLOAT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= STRING 
            {
              Type RESULT =null;
		RESULT = new Type(Type.STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // result_type ::= type 
            {
              ResultTypeOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ResultTypeOp(t.getValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // result_type ::= VOID 
            {
              ResultTypeOp RESULT =null;
		RESULT = new ResultTypeOp(ResultTypeOp.VOID);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stat_list ::= stat SEMI stat_list 
            {
              ArrayList<StatOp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatOp s = (StatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOp> list = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(0, s);
                                           RESULT = list;
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stat_list ::= stat SEMI 
            {
              ArrayList<StatOp> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatOp s = (StatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<StatOp> a_list = new ArrayList<>();
                                      a_list.add(s);
                                      RESULT = a_list;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stat ::= if_stat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfOp s = (IfOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stat ::= while_stat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileOp s = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stat ::= readln_stat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReadOp s = (ReadOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stat ::= write_stat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WriteOp s = (WriteOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stat ::= assign_stat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultipleAssignOp s = (MultipleAssignOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stat ::= call_proc 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProcOp s = (CallProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_stat ::= IF expr THEN stat_list elif_list else FI 
            {
              IfOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<StatOp> statList = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOp> elifList = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOp elseOp = (ElseOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOp(expr, statList, elifList, elseOp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elif_list ::= elif elif_list 
            {
              ArrayList<ElifOp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOp e = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOp> elist = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(elist == null){
                                            elist = new ArrayList<>();
                                       }
                                       elist.add(0, e);
                                       RESULT = elist;
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elif_list ::= 
            {
              ArrayList<ElifOp> RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elif ::= ELIF expr THEN stat_list 
            {
              ElifOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOp> statList = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElifOp(e, statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else ::= ELSE stat_list 
            {
              ElseOp RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOp> statList = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseOp(statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // else ::= 
            {
              ElseOp RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while_stat ::= WHILE stat_list RETURN expr DO stat_list OD 
            {
              WhileOp RESULT =null;
		int list_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int list_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<StatOp> list_1 = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int list_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int list_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOp> list_2 = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOp(list_1, expr, new DoOp(list_2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while_stat ::= WHILE expr DO stat_list OD 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOp> list = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileOp(null, expr, new DoOp(list));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id_list ::= ID 
            {
              ArrayList<IdLeaf> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdLeaf> list = new ArrayList<>();
                                      SymbolTable.SymbolTableRow row = currentTable.lookup(i);
                                      if(row == null){
                                         list.add(new IdLeaf(i, null));
                                      }
                                      else{
                                         list.add(new IdLeaf(i,row));
                                      }
                                      RESULT = list;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // id_list ::= id_list COMMA ID 
            {
              ArrayList<IdLeaf> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdLeaf> list = (ArrayList<IdLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      SymbolTable.SymbolTableRow row = currentTable.lookup(i);
                                      if(row == null){
                                       list.add(new IdLeaf(i, null));
                                      }
                                      else{
                                         list.add(new IdLeaf(i, row));
                                      }
                                      RESULT = list;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // par_id_list ::= ID 
            {
              ArrayList<IdLeaf> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdLeaf> list = new ArrayList<>();
                                      SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                      if(row == null){
                                         list.add(new IdLeaf(i, currentTable.add(i, sym.ID, Kind.VARIABLE)));
                                      }
                                      else{
                                        throw new Exception("Errore: Variabile già dichiarata");
                                      }
                                      RESULT = list;
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_id_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // par_id_list ::= par_id_list COMMA ID 
            {
              ArrayList<IdLeaf> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdLeaf> list = (ArrayList<IdLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                     if(row == null){
                                        list.add(new IdLeaf(i, currentTable.add(i, sym.ID, Kind.VARIABLE)));
                                     }
                                     else{
                                       throw new Exception("Errore: Variabile già dichiarata");
                                     }
                                     RESULT = list;
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_id_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // readln_stat ::= READ LPAR id_list RPAR 
            {
              ReadOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdLeaf> list = (ArrayList<IdLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadOp(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readln_stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // write_stat ::= WRITE LPAR expr_list RPAR 
            {
              WriteOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WriteOp(list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assign_stat ::= id_list ASSIGN expr_list 
            {
              MultipleAssignOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdLeaf> idList = (ArrayList<IdLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MultipleAssignOp(idList, exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // call_proc ::= ID LPAR expr_list RPAR 
            {
              CallProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> e = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
                                                IdLeaf f;
                                                if(temp == null){ //la procedura non è stata ancora dichiarata
                                                    temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
                                                    ((SymbolTable.ProcRow) temp).setFref(true);
                                                }
                                                f = new IdLeaf(i, temp);
                                                RESULT = new CallProcOp(f, e);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // call_proc ::= ID LPAR RPAR 
            {
              CallProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
                                                IdLeaf f;
                                                if(temp == null){ //la procedura non è stata ancora dichiarata
                                                   temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
                                                   ((SymbolTable.ProcRow) temp).setFref(true);
                                                }
                                                f = new IdLeaf(i, temp);
                                               RESULT = new CallProcOp(f, null);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_list ::= expr COMMA expr_list 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.add(0,e); //(0,e) altrimenti non si trova l'ordine delle expr
                                                RESULT = list;
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_list ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expr> exprList = new ArrayList<>();
                                                exprList.add(e);
                                                RESULT = exprList;
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotOp(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr GE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GeOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr LE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr NE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UMinusOp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= call_proc 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProcOp c = (CallProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= INT_CONST 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntConstLeaf(Integer.valueOf(n).intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= FLOAT_CONST 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatConstLeaf(Float.valueOf(n).floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConstLeaf(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= TRUE 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TrueLeaf(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= FALSE 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FalseLeaf(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SymbolTable.SymbolTableRow row = currentTable.lookup(i);
                                                if(row == null){
                                                    RESULT = new IdLeaf(i, currentTable.add(i, sym.ID, Kind.VARIABLE));
                                                }
                                                else{
                                                    RESULT = new IdLeaf(i,row);
                                                }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= NULL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NullLeaf(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
