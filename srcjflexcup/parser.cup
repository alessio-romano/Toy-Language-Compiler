package syntaxanalysis;


import java.util.ArrayList;
import tree_nodes.*;
import java.lang.Exception;

parser code{:public ProgramOp root;
             public Env currentTable = StackEnv.push(new Env(null, "global"));


           :}
scan with {: return getScanner().next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            NULL, PLUS, MINUS, TIMES, DIV, AND, OR, NOT, GT, GE, LT, LE, EQ, NE, COMMA, UMINUS,
                    SEMI, LPAR, RPAR, INT, STRING, FLOAT, BOOL, COLON, PROC, CORP, VOID, IF,
                    THEN, ELIF, FI, ELSE, WHILE, DO, OD, READ, WRITE, ASSIGN, RETURN;

terminal String   INT_CONST, FLOAT_CONST, ID, STRING_CONST;
terminal Boolean  TRUE, FALSE;

/* Non terminals */
non terminal ProgramOp              program;
non terminal ArrayList<VarDeclOp>   var_decl_list;
non terminal ArrayList<ProcOp>      proc_list;
non terminal ProcOp                 proc;
non terminal ProcOpBody             proc_body;
non terminal VarDeclOp              var_decl;
non terminal CallProcOp             call_proc;
non terminal IdListInitOp           id_list_init;
non terminal ArrayList<Expr>        expr_list;
non terminal Expr                   expr;
non terminal ReturnExprs            return_exprs;
non terminal WriteOp                write_stat;
non terminal ArrayList<IdLeaf>      id_list;
non terminal ArrayList<IdLeaf>      par_id_list;
non terminal ArrayList<ParamDeclOp> param_decl_list;
non terminal ParamDeclOp            par_decl;
non terminal Type                   type;
non terminal ArrayList<ResultTypeOp> result_type_list;
non terminal ResultTypeOp           result_type;
non terminal ArrayList<StatOp>      stat_list;
non terminal StatOp                 stat;
non terminal MultipleAssignOp       assign_stat;
non terminal ReadOp                 readln_stat;
non terminal IfOp                   if_stat;
non terminal ArrayList<ElifOp>      elif_list;
non terminal ElifOp                 elif;
non terminal ElseOp                 else;
non terminal WhileOp                while_stat;

/* Precedences */
precedence left LT, LE, GT, GE, EQ, NE;
precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, AND;
precedence left UMINUS, NOT;

/* The grammar rules */
start with program;

//Program
program ::=  var_decl_list:v proc_list:p {:root = new ProgramOp(v, p);
                                          RESULT = root;
                                        :}
          ;

//VarDeclList
var_decl_list ::= var_decl:v var_decl_list:list {: if(list == null){
                                                      list = new ArrayList<VarDeclOp>();
                                                   }
                                                   list.add(0, v);
                                                   RESULT = list;
                                                :}
                | /* vuoto */                   {:RESULT = null;:}
                ;
//VarDecl
var_decl ::= type:t id_list_init:list SEMI  {:RESULT = new VarDeclOp(t, list);:}
           ;

//ProcList
proc_list ::= proc:p                {:ArrayList<ProcOp> list = new ArrayList<>();
                                      list.add(p);
                                      RESULT = list;
                                    :}
            | proc:p proc_list:list {:list.add(0, p);
                                      RESULT = list;
                                    :}
            ;

//Proc
proc_body ::= var_decl_list:v_list stat_list:s_list RETURN return_exprs:r_exprs CORP SEMI
              {:RESULT = new ProcOpBody(v_list, s_list, r_exprs);:}
            |  var_decl_list:v_list RETURN return_exprs:r_exprs CORP SEMI
              {:RESULT = new ProcOpBody(v_list, null, r_exprs);:}
            ;
proc ::= PROC ID:i LPAR {:currentTable = StackEnv.push(new Env(StackEnv.top(), i));:}
           param_decl_list:p_list RPAR result_type_list:r_list COLON proc_body:p_body
          {: SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
             IdLeaf f;
             if(temp == null){ //la procedura non è stata ancora dichiarata
                 temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
             } else {
                //la entry era stata inserita da qualcun altro ma la procedura non era stata ancora dichiarata
                //ora invece la dichiarazione è stata trovata
                ((SymbolTable.ProcRow) temp).setFref(false);
             }
             f = new IdLeaf(i, temp);
            RESULT = new ProcOp(f, p_list, r_list, p_body, currentTable);
            currentTable = StackEnv.pop();

          :}
        | PROC ID:i LPAR RPAR
          {: currentTable = StackEnv.push(new Env(StackEnv.top(), i));:}
          result_type_list:r_list COLON proc_body:p_body
          {: SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
              IdLeaf f;
              if(temp == null){ //la procedura non è stata ancora dichiarata
                  temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
              } else {
                 //la entry era stata inserita da qualcun altro ma la procedura non era stata ancora dichiarata
                 //ora invece la dichiarazione è stata trovata
                 ((SymbolTable.ProcRow) temp).setFref(false);
              }
              f = new IdLeaf(i, temp);
            RESULT = new ProcOp(f, null, r_list, p_body, currentTable);
            currentTable = StackEnv.pop();
          :}
        ;

//IdListInit
id_list_init ::= ID:i                                       {: ArrayList<IdListInit> list = new ArrayList<>();
                                                               SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                               IdLeaf temp = new IdLeaf(i,row);
                                                               if(row == null){
                                                                  row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                                  temp = new IdLeaf(i,row);
                                                               }
                                                               else{throw new Exception("Errore variabile già dichiarata");}
                                                               list.add(temp);
                                                               RESULT = new IdListInitOp(list);
                                                            :}
               | id_list_init:list COMMA ID:i               {:
                                                              SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                              IdLeaf temp = new IdLeaf(i,row);
                                                              if(row == null){
                                                                 row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                                 temp = new IdLeaf(i,row);
                                                              }
                                                              else{throw new Exception("Errore variabile già dichiarata");}
                                                              list.add(temp);
                                                              RESULT = list;
                                                            :}
               | ID:i ASSIGN expr:e                         {:ArrayList<IdListInit> list = new ArrayList<>();
                                                              SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                              IdLeaf temp = new IdLeaf(i,row);
                                                              if(row == null){
                                                                row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                                temp = new IdLeaf(i,row);
                                                              }else{
                                                               throw new Exception("Errore variabile già dichiarata");
                                                               }
                                                              list.add(new SimpleAssignOp(temp, e));
                                                              RESULT = new IdListInitOp(list);
                                                            :}
               | id_list_init:list COMMA ID:i ASSIGN expr:e {:SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                                             IdLeaf temp = new IdLeaf(i,row);
                                                             if(row == null){
                                                             row =  currentTable.add(i, sym.ID, Kind.VARIABLE);
                                                             temp = new IdLeaf(i,row);
                                                             }else{
                                                              throw new Exception("Errore variabile già dichiarata");
                                                             }
                                                             list.add(new SimpleAssignOp(temp, e));
                                                             RESULT = list;
                                                            :}
               ;

//ResultTypeList
result_type_list ::= result_type:r {:ArrayList<ResultTypeOp> list = new ArrayList<>();
                                     list.add(r);
                                     RESULT = list;
                                   :}
                   | result_type:r COMMA result_type_list:list {:list.add(0, r);
                                                                 RESULT = list;
                                                               :}
                   ;

//ReturnExprs
return_exprs ::= expr_list:list {:RESULT = new ReturnExprs(list);:}
               | /* vuoto */    {:RESULT = null;:}
               ;

//ParamDeclList
param_decl_list ::= par_decl:p {:ArrayList<ParamDeclOp> list = new ArrayList<>();
                                 list.add(p);
                                 RESULT = list;
                               :}
                  | param_decl_list:list SEMI par_decl:p
                    {:list.add(p);
                       RESULT = list;
                    :}
                  ;

//ParDecl
par_decl ::= type:t par_id_list:list {:RESULT = new ParamDeclOp(t, list);:}
           ;

//Type
type ::= INT    {:RESULT = new Type(Type.INT);:}
       | BOOL   {:RESULT = new Type(Type.BOOL);:}
       | FLOAT  {:RESULT = new Type(Type.FLOAT);:}
       | STRING {:RESULT = new Type(Type.STRING);:}
       ;

//ResultType
result_type ::= type:t {:RESULT = new ResultTypeOp(t.getValue());:}
              | VOID   {:RESULT = new ResultTypeOp(ResultTypeOp.VOID);:}
              ;

//StatList
stat_list ::= stat:s SEMI stat_list:list {:list.add(0, s);
                                           RESULT = list;
                                         :}
            | stat:s SEMI           {:ArrayList<StatOp> a_list = new ArrayList<>();
                                      a_list.add(s);
                                      RESULT = a_list;
                                    :}
            ;

//Stat
stat    ::= if_stat:s       {:RESULT = s;:}
          | while_stat:s    {:RESULT = s;:}
          | readln_stat:s   {:RESULT = s;:}
          | write_stat:s    {:RESULT = s;:}
          | assign_stat:s   {:RESULT = s;:}
          | call_proc:s     {:RESULT = s;:}
          ;

//IfStat
if_stat   ::= IF expr:expr THEN stat_list:statList
              elif_list:elifList else:elseOp FI {: RESULT = new IfOp(expr, statList, elifList, elseOp); :}
            ;

//ElifList
elif_list ::= elif:e elif_list:elist {:if(elist == null){
                                            elist = new ArrayList<>();
                                       }
                                       elist.add(0, e);
                                       RESULT = elist;
                                     :}
            | /* vuoto */            {:RESULT = null;:}
            ;

//Elif
elif      ::= ELIF expr:e THEN stat_list:statList {:RESULT = new ElifOp(e, statList);:}
            ;

//Else
else      ::= ELSE stat_list:statList {:RESULT = new ElseOp(statList);:}
            | /* vuoto */             {:RESULT = null;:}
            ;

//WhileStat
while_stat ::= WHILE stat_list:list_1 RETURN
               expr:expr DO stat_list:list_2 OD       {:RESULT = new WhileOp(list_1, expr, new DoOp(list_2));:}
             | WHILE expr:expr DO stat_list:list OD   {:RESULT = new WhileOp(null, expr, new DoOp(list));:}
             ;

//ID List
id_list ::= ID:i                    {:ArrayList<IdLeaf> list = new ArrayList<>();
                                      SymbolTable.SymbolTableRow row = currentTable.lookup(i);
                                      if(row == null){
                                         list.add(new IdLeaf(i, null));
                                      }
                                      else{
                                         list.add(new IdLeaf(i,row));
                                      }
                                      RESULT = list;
                                    :}

          | id_list:list COMMA ID:i {:
                                      SymbolTable.SymbolTableRow row = currentTable.lookup(i);
                                      if(row == null){
                                       list.add(new IdLeaf(i, null));
                                      }
                                      else{
                                         list.add(new IdLeaf(i, row));
                                      }
                                      RESULT = list;
                                    :}
          ;

par_id_list ::= ID:i                {:ArrayList<IdLeaf> list = new ArrayList<>();
                                      SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                      if(row == null){
                                         list.add(new IdLeaf(i, currentTable.add(i, sym.ID, Kind.VARIABLE)));
                                      }
                                      else{
                                        throw new Exception("Errore: Variabile già dichiarata");
                                      }
                                      RESULT = list;
                                     :}

          | par_id_list:list COMMA ID:i {:SymbolTable.SymbolTableRow row = currentTable.currentLookup(i);
                                     if(row == null){
                                        list.add(new IdLeaf(i, currentTable.add(i, sym.ID, Kind.VARIABLE)));
                                     }
                                     else{
                                       throw new Exception("Errore: Variabile già dichiarata");
                                     }
                                     RESULT = list;
                                     :}
          ;

//Read Operation
readln_stat ::= READ LPAR id_list:list RPAR {:RESULT = new ReadOp(list);:}
             ;

//Write Operation
write_stat ::=  WRITE LPAR expr_list:list RPAR {:RESULT = new WriteOp(list); :}
             ;

//Assign Stat
assign_stat ::= id_list:idList ASSIGN expr_list:exprList {:RESULT = new MultipleAssignOp(idList, exprList);:}
             ;

//Call Procedure
call_proc ::= ID:i LPAR expr_list:e RPAR     {: SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
                                                IdLeaf f;
                                                if(temp == null){ //la procedura non è stata ancora dichiarata
                                                    temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
                                                    ((SymbolTable.ProcRow) temp).setFref(true);
                                                }
                                                f = new IdLeaf(i, temp);
                                                RESULT = new CallProcOp(f, e);
                                             :}
             | ID:i LPAR RPAR                {: SymbolTable.SymbolTableRow temp = currentTable.lookup(i);
                                                IdLeaf f;
                                                if(temp == null){ //la procedura non è stata ancora dichiarata
                                                   temp = currentTable.getPrev().add(i, sym.ID, Kind.PROCEDURE);
                                                   ((SymbolTable.ProcRow) temp).setFref(true);
                                                }
                                                f = new IdLeaf(i, temp);
                                               RESULT = new CallProcOp(f, null);
                                             :}
             ;

//Expression list
expr_list ::= expr:e COMMA expr_list:list    {: list.add(0,e); //(0,e) altrimenti non si trova l'ordine delle expr
                                                RESULT = list;
                                             :}

             | expr:e                        {: ArrayList<Expr> exprList = new ArrayList<>();
                                                exprList.add(e);
                                                RESULT = exprList;
                                             :}
             ;

//Expressions
expr      ::=  expr:e1 PLUS  expr:e2         {: RESULT = new PlusOp(e1, e2); :}

             | expr:e1 MINUS expr:e2         {: RESULT = new MinusOp(e1, e2); :}

             | expr:e1 TIMES expr:e2         {: RESULT = new MultOp(e1, e2); :}

             | expr:e1 DIV   expr:e2         {: RESULT = new DivOp(e1, e2); :}

             | expr:e1 AND   expr:e2         {: RESULT = new AndOp(e1, e2); :}

             | expr:e1 OR    expr:e2         {: RESULT = new OrOp(e1, e2); :}

             |         NOT   expr:e1         {: RESULT = new NotOp(e1); :}

             | expr:e1 GT    expr:e2         {: RESULT = new GtOp(e1, e2); :}

             | expr:e1 GE    expr:e2         {: RESULT = new GeOp(e1, e2); :}

             | expr:e1 LT    expr:e2         {: RESULT = new LtOp(e1, e2); :}

             | expr:e1 LE    expr:e2         {: RESULT = new LeOp(e1, e2); :}

             | expr:e1 EQ    expr:e2         {: RESULT = new EqOp(e1, e2); :}

             | expr:e1 NE    expr:e2         {: RESULT = new NeOp(e1, e2); :}

             |         MINUS expr:e          {: RESULT = new UMinusOp(e); :} %prec UMINUS

             |         call_proc:c           {: RESULT = c; :}

             |         INT_CONST:n           {: RESULT = new IntConstLeaf(Integer.valueOf(n).intValue()); :}

             |         FLOAT_CONST:n         {: RESULT = new FloatConstLeaf(Float.valueOf(n).floatValue()); :}

             |         STRING_CONST:s        {: RESULT = new StringConstLeaf(s); :}

             |         TRUE:t                {: RESULT = new TrueLeaf(); :}

             |         FALSE:f               {: RESULT = new FalseLeaf(); :}

             |         ID:i                  {: SymbolTable.SymbolTableRow row = currentTable.lookup(i);
                                                if(row == null){
                                                    throw new Exception("Errore - Utilizzo di variabile non dichiarata");
                                                }
                                                else{
                                                    RESULT = new IdLeaf(i,row);
                                                }
                                             :}

             |         NULL:n                {: RESULT = new NullLeaf(); :}
             ;